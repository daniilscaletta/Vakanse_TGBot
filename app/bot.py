import asyncio
import logging
from typing import List

import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler import events

from app.config import config
from app.models import Vacancy

PLANNING_HOUR = 6
PLANNING_MINUTE = 0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
config.validate()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN or "")
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()


async def get_vacancies_from_api() -> List[Vacancy]:
    try:
        api_url = f"http://{config.API_HOST}:{config.API_PORT}/vacancies"
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ API: {api_url}")
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ API")
                    return [Vacancy(**vacancy) for vacancy in data]
                else:
                    logger.error(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ API: {e}")
        return []


def format_vacancy_message(vacancy: Vacancy) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
    """
    return (
        f"üè¢ <b>{vacancy.title}</b>\n"
        f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {vacancy.salary}\n"
        f"üîó <a href='{vacancy.url}'>–û—Ç–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</a>\n"
        f"{'‚îÄ' * 34}"
    )


async def send_daily_vacancies() -> None:
    if not config.NOTIFICATION_USER_ID:
        logger.error("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    try:
        logger.info("üïï –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π...")

        vacancies = await get_vacancies_from_api()

        if not vacancies:
            await bot.send_message(
                config.NOTIFICATION_USER_ID,
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await bot.send_message(
            config.NOTIFICATION_USER_ID,
            f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n"
            "–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –í–∞—Å:",
        )

        batch_size = 5
        for i in range(0, len(vacancies), batch_size):
            batch = vacancies[i : i + batch_size]
            message_text = "\n\n".join([format_vacancy_message(vac) for vac in batch])

            await bot.send_message(
                config.NOTIFICATION_USER_ID,
                message_text,
                parse_mode="HTML",
                disable_web_page_preview=True,
            )

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if i + batch_size < len(vacancies):
                await asyncio.sleep(1)

        await bot.send_message(
            config.NOTIFICATION_USER_ID,
            "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è "
            "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.",
        )

        logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        try:
            await bot.send_message(
                config.NOTIFICATION_USER_ID,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.",
            )
        except Exception:
            pass


@dp.message(Command("start"))
async def cmd_start(message: Message) -> None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if not config.NOTIFICATION_USER_ID:
        if message.from_user:
            config.NOTIFICATION_USER_ID = str(message.from_user.id)
        print(
            f"üë§ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: "
            f"{config.NOTIFICATION_USER_ID}"
        )

    await message.answer("üîç –ò—â—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ Pentest, DevOps, Develop...")

    try:
        vacancies = await get_vacancies_from_api()

        if not vacancies:
            await message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        await message.answer(
            f"üìã –ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π:\n\n"
            "–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –í–∞—Å:"
        )

        batch_size = 5
        for i in range(0, len(vacancies), batch_size):
            batch = vacancies[i : i + batch_size]
            message_text = "\n\n".join([format_vacancy_message(vac) for vac in batch])

            await message.answer(
                message_text, parse_mode="HTML", disable_web_page_preview=True
            )

            if i + batch_size < len(vacancies):
                await asyncio.sleep(1)

        await message.answer(
            "‚úÖ –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.\n\n"
            "ü§ñ –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ "
            "6:00!\n\n"
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@dp.message()
async def echo_message(message: Message) -> None:
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.\n\n"
        "ü§ñ –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ "
        "6:00!\n\n"
    )


def setup_scheduler() -> None:
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∞–∫–∞–Ω—Å–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00
    job = scheduler.add_job(
        send_daily_vacancies,
        CronTrigger(hour=PLANNING_HOUR-3, minute=PLANNING_MINUTE),
        id="daily_vacancies",
        name="–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
        replace_existing=True,
    )

    logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –≤–∞–∫–∞–Ω—Å–∏–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00")
    logger.info(f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: {job.next_run_time if hasattr(job, 'next_run_time') else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    def job_error_listener(event):
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {event.exception}")
        logger.error(f"   –ó–∞–¥–∞—á–∞: {event.job_id}")
        logger.error(f"   –î–µ—Ç–∞–ª–∏: {event.traceback}")

    scheduler.add_listener(job_error_listener, events.EVENT_JOB_ERROR)
    logger.info("üîß –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")


async def main() -> None:
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    logger.info(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: API_HOST={config.API_HOST}, API_PORT={config.API_PORT}")
    logger.info(f"üë§ USER_ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {config.NOTIFICATION_USER_ID}")

    setup_scheduler()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
    jobs = scheduler.get_jobs()
    logger.info(f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {len(jobs)}")
    for job in jobs:
        next_run = job.next_run_time if hasattr(job, 'next_run_time') else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        logger.info(f"  - {job.name} (ID: {job.id}): {next_run}")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        scheduler.shutdown()
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
